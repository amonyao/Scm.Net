using Com.Scm.Dsa.Dba.Sugar;
using Com.Scm.Dvo;
using Com.Scm.Result;
using Com.Scm.Service;
using Com.Scm.Utils;
using Mapster;
using Microsoft.AspNetCore.Mvc;

namespace Com.Scm.{NameSpace}
{
/// <summary>
/// {TableNameDescribe}服务接口
/// </summary>
[ApiExplorerSettings(GroupName = "{Version}")]
public class {TableName}Service : ApiService 
{
    private readonly SugarRepository<{TableName}Dao> _thisRepository;
    public {TableName}Service(SugarRepository<{TableName}Dao> thisRepository)
    {
        _thisRepository = thisRepository;
    }
    
    /// <summary>
    /// 查询分页
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    public async Task<PageResult<{TableName}Dvo>> GetPagesAsync(ScmSearchPageRequest request)
    {
        var result = await _thisRepository.AsQueryable()
            .WhereIF(!request.IsAllStatus(), a => a.row_status == request.row_status)
            .WhereIF(IsValidId(request.option_id), a => a.option_id == request.option_id)
            .WhereIF(!string.IsNullOrEmpty(request.key), a => a.text.Contains(request.key))
            .OrderBy(m => m.id)
            .Select<{TableName}Dvo>()
            .ToPageAsync(request.page, request.limit);

            Prepare(result.Items);
            return result;
    }

    /// <summary>
    /// 查询所有
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    public async Task<List<{TableName}Dvo>> GetListAsync(ScmSearchRequest request)
    {
        var result = await _thisRepository.AsQueryable()
            .Where(a => a.row_status == Com.Scm.Enums.ScmStatusEnum.Enabled)
            .WhereIF(!string.IsNullOrEmpty(request.key), a => a.text.Contains(request.key))
            .OrderBy(m => m.id)
            .Select<{TableName}Dvo>()
            .ToListAsync();

        Prepare(result);
        return result;
    }

    private void Prepare(List<{TableName}Dvo> list)
    {
        foreach (var item in list)
        {
            item.update_names = GetUserNames(_userRepository, item.update_user);
            item.update_names = GetUserNames(_userRepository, item.update_user);
        }
    }

    /// <summary>
    /// 根据主键查询
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    [HttpGet("{id}")]
    public async Task<{TableName}Dvo> GetAsync(long id)
    {
        var model = await _thisRepository.GetByIdAsync(id);
        return model.Adapt<{TableName}Dvo>();
    }

    /// <summary>
    /// 编辑读取
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    [HttpGet("{id}")]
    public async Task<{TableName}Dvo> GetEditAsync(long id)
    {
        return await _thisRepository
            .AsQueryable()
            .Select<{TableName}Dvo>()
            .FirstAsync(m => m.id == id);
    }

    /// <summary>
    /// 查看读取
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    [HttpGet("{id}")]
    public async Task<{TableName}Dvo> GetViewAsync(long id)
    {
        return await _thisRepository
            .AsQueryable()
            .Select<{TableName}Dvo>()
            .FirstAsync(m => m.id == id);
    }

    /// <summary>
    /// 添加
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
    public async Task<bool> AddAsync({TableName}Dto model) =>
        await _thisRepository.InsertAsync(model.Adapt<{TableName}Dao>());

    /// <summary>
    /// 更新
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
    public async Task UpdateAsync({TableName}Dto model)
    {
        var dao = await _thisRepository.GetByIdAsync(model.id);
        if (dao == null)
        {
            return;
        }

        dao = model.Adapt(dao);
        await _thisRepository.UpdateAsync(dao);
    }

    /// <summary>
    /// 批量更新状态
    /// </summary>
    /// <param name="param">逗号分隔</param>
    /// <returns></returns>
    public async Task<int> StatusAsync(ScmChangeStatusRequest param)
    {
        return await UpdateStatus(_thisRepository, param.ids, param.status);
    }

    /// <summary>
    /// 批量删除记录
    /// </summary>
    /// <param name="ids">逗号分隔</param>
    /// <returns></returns>
    [HttpDelete]
    public async Task<int> DeleteAsync(string ids)
    {
        return await DeleteRecord(_thisRepository, ids.ToListLong());
    }
}
}